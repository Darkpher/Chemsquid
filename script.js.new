class ChemSquidGame {
    constructor() {
        // Initialize game elements
        this.initializeElements();
        
        // Initialize game state
        this.gameState = 'splash';
        this.currentRound = 1;
        this.score = 0;
        this.timeLeft = 0;
        this.timer = null;
        this.soundEnabled = true;
        this.usedQuestions = new Set();
        
        // Bind event listeners
        this.bindEventListeners();
    }

    initializeElements() {
        // Screens
        this.splashScreen = document.getElementById('splash-screen');
        this.gameScreen = document.getElementById('game-screen');
        this.eliminationScreen = document.getElementById('elimination-screen');
        this.victoryScreen = document.getElementById('victory-screen');
        
        // Game elements
        this.playerNameInput = document.getElementById('player-name');
        this.playerDisplay = document.getElementById('player-display');
        this.scoreDisplay = document.getElementById('score');
        this.roundDisplay = document.getElementById('round-display');
        this.questionText = document.getElementById('question-text');
        this.answerButtons = document.getElementById('answer-buttons');
        this.timerContainer = document.getElementById('timer-container');
        this.timerBar = document.getElementById('timer-bar');
        this.timerText = document.getElementById('timer-text');
        this.soundToggle = document.getElementById('sound-toggle');
        
        // Audio elements
        this.backgroundMusic = document.getElementById('background-music');
        this.correctSound = document.getElementById('correct-sound');
        this.wrongSound = document.getElementById('wrong-sound');
        this.eliminatedSound = document.getElementById('eliminated-sound');
        this.timerTickSound = document.getElementById('timer-tick');
    }

    bindEventListeners() {
        document.getElementById('start-game-btn').addEventListener('click', () => this.startGame());
        document.getElementById('restart-btn').addEventListener('click', () => this.restartGame());
        document.getElementById('play-again-btn').addEventListener('click', () => this.restartGame());
        document.getElementById('sound-toggle').addEventListener('click', () => this.toggleSound());
        document.getElementById('fullscreen-btn').addEventListener('click', () => this.toggleFullscreen());
        document.getElementById('pause-btn').addEventListener('click', () => this.pauseGame());
    }

    startGame() {
        if (!this.playerNameInput.value) {
            alert('Please enter your player number!');
            return;
        }
        
        // Reset game state
        this.gameState = 'playing';
        this.currentRound = 1;
        this.score = 0;
        this.usedQuestions.clear();
        
        // Update display
        this.playerDisplay.textContent = `Player ${this.playerNameInput.value}`;
        this.updateScore();
        this.roundDisplay.textContent = `Round ${this.currentRound}`;
        
        // Show game screen
        this.showScreen('game');
        
        // Start background music
        if (this.soundEnabled) {
            this.playBackgroundMusic();
        }
        
        // Start first round
        this.startRound();
    }

    startRound() {
        // Get questions for this round
        this.roundQuestions = this.getRoundQuestions();
        
        // Show round-specific UI
        this.showRoundUI();
        
        // Special handling for honeycomb round
        if (this.currentRound === 2) {
            this.setupHoneycombRound();
        } else {
            // Start with first question for other rounds
            this.nextQuestion();
        }
    }

    showRoundUI() {
        // Hide all round-specific UIs
        document.querySelectorAll('.round-ui').forEach(ui => ui.classList.add('hidden'));
        
        // Show the appropriate UI based on current round
        switch(this.currentRound) {
            case 2:
                const containerUI = document.getElementById('container-ui');
                const honeycombQuestion = document.getElementById('honeycomb-question');
                containerUI.classList.remove('hidden');
                honeycombQuestion.classList.add('hidden');
                this.setupHoneycombRound();
                break;
            case 3:
                document.getElementById('bridge-ui').classList.remove('hidden');
                break;
        }
    }

    setupHoneycombRound() {
        // Reset honeycomb symbols
        const symbols = document.querySelectorAll('.honeycomb-symbol');
        symbols.forEach(symbol => {
            symbol.classList.remove('disabled');
            symbol.onclick = () => this.selectHoneycombSymbol(symbol.dataset.symbol);
        });
    }

    selectHoneycombSymbol(symbol) {
        if (!this.roundQuestions.length) return;
        
        const honeycombQuestion = document.getElementById('honeycomb-question');
        const selectedSymbolDisplay = document.getElementById('selected-symbol-display');
        const honeycombQuestionText = document.getElementById('honeycomb-question-text');
        
        // Get the current question
        this.currentQuestion = this.roundQuestions.shift();
        
        // Show the question UI
        honeycombQuestion.classList.remove('hidden');
        
        // Display symbol and question
        const symbolIcons = {
            'star': '⭐',
            'triangle': '▲',
            'circle': '●',
            'umbrella': '☂'
        };
        selectedSymbolDisplay.textContent = `${symbolIcons[symbol]} ${symbol.charAt(0).toUpperCase() + symbol.slice(1)}`;
        honeycombQuestionText.textContent = this.currentQuestion.question;
        
        // Set answer button texts
        const buttons = document.querySelectorAll('.honeycomb-answer-btn');
        buttons.forEach((btn, idx) => {
            btn.textContent = `${String.fromCharCode(65 + idx)}. ${this.currentQuestion.options[idx]}`;
            btn.onclick = () => this.handleHoneycombAnswer(idx);
        });
        
        // Disable all symbols after selection
        document.querySelectorAll('.honeycomb-symbol').forEach(el => {
            el.classList.add('disabled');
        });
    }

    handleHoneycombAnswer(selectedIdx) {
        if (selectedIdx === this.currentQuestion.correct) {
            this.handleCorrectAnswer();
        } else {
            this.handleWrongAnswer();
        }
        
        // Hide honeycomb question after answering
        document.getElementById('honeycomb-question').classList.add('hidden');
    }

    setupBridgeGame() {
        const bridgeUI = document.getElementById('bridge-ui');
        bridgeUI.classList.remove('hidden');
        
        const glassPanels = bridgeUI.querySelectorAll('.glass-panel');
        glassPanels.forEach(panel => {
            panel.addEventListener('click', (e) => this.handleBridgeChoice(e));
        });
    }

    handleBridgeChoice(event) {
        const panel = event.target;
        const choice = panel.dataset.choice;
        
        // Get current question and check if choice is correct
        if (this.currentQuestion) {
            const isCorrect = choice === 'A' ? this.currentQuestion.correct === 0 : this.currentQuestion.correct === 1;
            
            if (isCorrect) {
                this.handleCorrectAnswer();
            } else {
                this.handleWrongAnswer();
            }
        }
    }

    getRoundQuestions() {
        const roundKey = `round${this.currentRound}`;
        const allQuestions = QUESTIONS[roundKey];
        const config = ROUND_CONFIG[roundKey];
        
        // Filter out used questions
        const availableQuestions = allQuestions.filter(q => !this.usedQuestions.has(q.question));
        
        // If we don't have enough questions, reset used questions
        if (availableQuestions.length < config.questionsPerRound) {
            this.usedQuestions.clear();
            return this.shuffleArray(allQuestions).slice(0, config.questionsPerRound);
        }
        
        return this.shuffleArray(availableQuestions).slice(0, config.questionsPerRound);
    }

    nextQuestion() {
        if (this.roundQuestions.length === 0) {
            this.completeRound();
            return;
        }
        
        this.currentQuestion = this.roundQuestions.shift();
        this.usedQuestions.add(this.currentQuestion.question);
        
        this.displayQuestion();
        this.startTimer();
    }

    displayQuestion() {
        this.questionText.textContent = this.currentQuestion.question;
        
        // Clear previous answer buttons
        this.answerButtons.innerHTML = '';
        
        // Create answer buttons
        this.currentQuestion.options.forEach((option, index) => {
            const button = document.createElement('button');
            button.className = 'answer-btn';
            button.textContent = option;
            button.dataset.answer = index;
            
            button.addEventListener('click', (e) => this.handleAnswer(e));
            this.answerButtons.appendChild(button);
        });
        
        // Show timer for rounds that need it
        if (this.currentRound === 1 || this.currentRound === 4) {
            this.timerContainer.classList.remove('hidden');
        } else {
            this.timerContainer.classList.add('hidden');
        }
    }

    startTimer() {
        const config = ROUND_CONFIG[`round${this.currentRound}`];
        this.timeLeft = config.timeLimit;
        
        // Clear existing timer
        if (this.timer) {
            clearInterval(this.timer);
        }
        
        // Update timer display
        this.updateTimerDisplay();
        
        // Start countdown
        this.timer = setInterval(() => {
            this.timeLeft--;
            this.updateTimerDisplay();
            
            if (this.soundEnabled && this.timeLeft <= 3) {
                this.playTimerTick();
            }
            
            if (this.timeLeft <= 0) {
                this.handleTimeUp();
            }
        }, 1000);
    }

    updateTimerDisplay() {
        this.timerText.textContent = this.timeLeft;
        
        // Update timer bar
        const config = ROUND_CONFIG[`round${this.currentRound}`];
        const percentage = (this.timeLeft / config.timeLimit) * 100;
        this.timerBar.style.width = `${percentage}%`;
        
        // Change color based on time left
        if (this.timeLeft <= 3) {
            this.timerBar.style.background = '#DC143C';
        } else if (this.timeLeft <= 5) {
            this.timerBar.style.background = '#FFA500';
        } else {
            this.timerBar.style.background = 'linear-gradient(90deg, #00FF00, #FF1493)';
        }
    }

    handleAnswer(event) {
        const button = event.target;
        const selectedAnswer = parseInt(button.dataset.answer);
        
        // Clear timer
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
        
        // Check if answer is correct
        if (selectedAnswer === this.currentQuestion.correct) {
            this.handleCorrectAnswer(button);
        } else {
            this.handleWrongAnswer(button);
        }
    }

    handleCorrectAnswer(button = null) {
        if (button) {
            button.classList.add('correct');
        }
        
        this.score += 10;
        this.updateScore();
        
        if (this.soundEnabled) {
            this.playCorrectSound();
        }
        
        // Show correct feedback briefly
        setTimeout(() => {
            this.nextQuestion();
        }, 1000);
    }

    handleWrongAnswer(button = null) {
        if (button) {
            button.classList.add('wrong');
        }
        
        if (this.soundEnabled) {
            this.playWrongSound();
        }
        
        // Show wrong feedback briefly
        setTimeout(() => {
            this.eliminatePlayer();
        }, 1000);
    }

    handleTimeUp() {
        if (this.timer) {
            clearInterval(this.timer);
            this.timer = null;
        }
        
        if (this.soundEnabled) {
            this.playWrongSound();
        }
        
        this.eliminatePlayer();
    }

    eliminatePlayer() {
        this.gameState = 'eliminated';
        
        if (this.soundEnabled) {
            this.playEliminatedSound();
            this.stopBackgroundMusic();
        }
        
        // Hide honeycomb UI when eliminated
        document.getElementById('container-ui').classList.add('hidden');
        document.getElementById('honeycomb-question').classList.add('hidden');
        
        this.showScreen('elimination');
    }

    completeRound() {
        this.currentRound++;
        
        if (this.currentRound > 4) {
            this.victory();
        } else {
            // Show round transition
            this.showRoundTransition();
        }
    }

    showRoundTransition() {
        const roundNames = {
            2: "Sugar Honeycomb",
            3: "Glass Bridge", 
            4: "Final Survival"
        };
        
        this.questionText.textContent = `Round ${this.currentRound}: ${roundNames[this.currentRound]}`;
        this.answerButtons.innerHTML = '';
        
        // Hide honeycomb UI during transition
        document.getElementById('container-ui').classList.add('hidden');
        document.getElementById('honeycomb-question').classList.add('hidden');
        
        setTimeout(() => {
            this.startRound();
        }, 2000);
    }

    victory() {
        this.gameState = 'victory';
        this.finalScore = this.score;
        document.getElementById('final-score').textContent = this.finalScore;
        
        if (this.soundEnabled) {
            this.stopBackgroundMusic();
        }
        
        // Hide honeycomb UI on victory
        document.getElementById('container-ui').classList.add('hidden');
        document.getElementById('honeycomb-question').classList.add('hidden');
        
        this.saveHighScore();
        this.showScreen('victory');
    }

    restartGame() {
        // Hide all round-specific UIs
        document.querySelectorAll('.round-ui').forEach(ui => ui.classList.add('hidden'));
        
        this.showScreen('splash');
        this.playerNameInput.value = '';
        this.playerNameInput.focus();
    }

    showScreen(screenName) {
        // Hide all screens
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        
        // Show requested screen
        switch (screenName) {
            case 'splash':
                this.splashScreen.classList.add('active');
                break;
            case 'game':
                this.gameScreen.classList.add('active');
                break;
            case 'elimination':
                this.eliminationScreen.classList.add('active');
                break;
            case 'victory':
                this.victoryScreen.classList.add('active');
                break;
        }
    }

    updateScore() {
        this.scoreDisplay.textContent = `Score: ${this.score}`;
    }

    toggleSound() {
        this.soundEnabled = !this.soundEnabled;
        this.soundToggle.textContent = this.soundEnabled ? '🔊' : '🔇';
        
        if (!this.soundEnabled) {
            this.stopBackgroundMusic();
        } else if (this.gameState === 'playing') {
            this.playBackgroundMusic();
        }
    }

    playBackgroundMusic() {
        if (this.backgroundMusic) {
            this.backgroundMusic.volume = 0.3;
            this.backgroundMusic.play().catch(e => console.log('Audio play failed:', e));
        }
    }

    stopBackgroundMusic() {
        if (this.backgroundMusic) {
            this.backgroundMusic.pause();
            this.backgroundMusic.currentTime = 0;
        }
    }

    playCorrectSound() {
        if (this.correctSound) {
            this.correctSound.currentTime = 0;
            this.correctSound.play().catch(e => console.log('Audio play failed:', e));
        }
    }

    playWrongSound() {
        if (this.wrongSound) {
            this.wrongSound.currentTime = 0;
            this.wrongSound.play().catch(e => console.log('Audio play failed:', e));
        }
    }

    playEliminatedSound() {
        if (this.eliminatedSound) {
            this.eliminatedSound.currentTime = 0;
            this.eliminatedSound.play().catch(e => console.log('Audio play failed:', e));
        }
    }

    playTimerTick() {
        if (this.timerTickSound) {
            this.timerTickSound.currentTime = 0;
            this.timerTickSound.play().catch(e => console.log('Audio play failed:', e));
        }
    }

    toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen();
        } else {
            document.exitFullscreen();
        }
    }

    pauseGame() {
        if (this.gameState === 'playing') {
            this.gameState = 'paused';
            if (this.timer) {
                clearInterval(this.timer);
            }
            if (this.soundEnabled) {
                this.stopBackgroundMusic();
            }
        } else if (this.gameState === 'paused') {
            this.gameState = 'playing';
            if (this.timeLeft > 0) {
                this.startTimer();
            }
            if (this.soundEnabled) {
                this.playBackgroundMusic();
            }
        }
    }

    shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }
        return array;
    }

    saveHighScore() {
        const highScores = JSON.parse(localStorage.getItem('highScores') || '[]');
        highScores.push({
            player: this.playerNameInput.value,
            score: this.score
        });
        highScores.sort((a, b) => b.score - a.score);
        localStorage.setItem('highScores', JSON.stringify(highScores.slice(0, 10)));
    }
}
